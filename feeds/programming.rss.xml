<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Between the Brackets - Programming</title><link>https://azad2171.github.io/</link><description>Low-Latency C++ and Trading System Programming</description><atom:link href="https://azad2171.github.io/feeds/programming.rss.xml" rel="self"/><lastBuildDate>Mon, 28 Jul 2025 23:00:00 +0530</lastBuildDate><item><title>Structure of Arrays (SoA) vs Array of Structures (AoS) in C++: A Deep Dive into Cache-Optimized Performance</title><link>https://azad2171.github.io/soa_vs_aos_memory_layout_cpp/</link><description>&lt;p&gt;Learn how the way you structure your data, as a Structure of Arrays (SoA) or Array of Structures (AoS), can significantly affect performance in C++. This deep dive explains memory layout, CPU caches, and real-world benchmarks, showing why SoA often outperforms AoS in high-frequency, cache-sensitive systems like trading platforms or simulation engines.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lovekesh Azad</dc:creator><pubDate>Mon, 28 Jul 2025 23:00:00 +0530</pubDate><guid>tag:azad2171.github.io,2025-07-28:/soa_vs_aos_memory_layout_cpp/</guid><category>Programming</category><category>C++</category><category>Structure of Arrays</category><category>Array of Structures</category><category>Memory Layout Optimization</category><category>CPU Cache</category><category>High-Frequency Trading</category><category>Data-Oriented Design</category><category>Low-Latency Programming</category><category>C++ Memory Management</category></item><item><title>Why Your C++ Loop Might Not Run: Volatile &amp; Compiler Optimizations</title><link>https://azad2171.github.io/why-your-cpp-loop-might-not-be-running/</link><description>&lt;p&gt;Learn how the volatile keyword and compiler optimizations affect control flow in low-latency C++ code.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lovekesh Azad</dc:creator><pubDate>Sun, 20 Jul 2025 22:00:00 +0530</pubDate><guid>tag:azad2171.github.io,2025-07-20:/why-your-cpp-loop-might-not-be-running/</guid><category>Programming</category><category>C++</category><category>VOLATILE</category><category>Low Latency Programming</category></item><item><title>Why Integer Math Is So Much Faster Than Floating-Point</title><link>https://azad2171.github.io/why-integer-math-is-faster-than-floating-point/</link><description>&lt;p&gt;Discover why integer operations outperform floating-point math in C++ and how it impacts performance-critical systems like HFT and low-latency computing.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lovekesh Azad</dc:creator><pubDate>Fri, 18 Jul 2025 22:00:00 +0530</pubDate><guid>tag:azad2171.github.io,2025-07-18:/why-integer-math-is-faster-than-floating-point/</guid><category>Programming</category><category>C++</category><category>HFT</category><category>low latency</category><category>performance optimization</category><category>floating point</category></item></channel></rss>