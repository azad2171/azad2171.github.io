<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Between the Brackets</title><link href="https://azad2171.github.io/" rel="alternate"/><link href="https://azad2171.github.io/feeds/all.atom.xml" rel="self"/><id>https://azad2171.github.io/</id><updated>2025-07-20T22:00:00+05:30</updated><subtitle>Low-Latency C++ and Trading System Programming</subtitle><entry><title>Why Your C++ Loop Might Not Run: Volatile &amp; Compiler Optimizations</title><link href="https://azad2171.github.io/why-your-c-loop-might-not-run-volatile-compiler-optimizations/" rel="alternate"/><published>2025-07-20T22:00:00+05:30</published><updated>2025-07-20T22:00:00+05:30</updated><author><name>Lovekesh Azad</name></author><id>tag:azad2171.github.io,2025-07-20:/why-your-c-loop-might-not-run-volatile-compiler-optimizations/</id><summary type="html">&lt;p&gt;Learn how the volatile keyword and compiler optimizations affect control flow in low-latency C++ code.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Understanding the &lt;code&gt;volatile&lt;/code&gt; Keyword and Compiler Optimizations&lt;/h1&gt;
&lt;p&gt;In C++, writing a loop that counts from 1 to a billion feels like a sure way to consume time and CPU cycles. But what if your loop - even with all its iterations - &lt;strong&gt;doesn’t run at all&lt;/strong&gt;? Or what if your carefully written benchmark gets replaced by a single line of code?&lt;/p&gt;
&lt;p&gt;Welcome to the world of &lt;strong&gt;modern compiler optimizations&lt;/strong&gt;, where the compiler often knows better than you - and isn't afraid to prove it.&lt;/p&gt;
&lt;p&gt;This article introduces a critical concept in C++: the &lt;code&gt;volatile&lt;/code&gt; keyword, and why your code may not behave the way you think it will - especially when performance is involved.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;The Problem: A Loop That “Should” Take Time&lt;/h2&gt;
&lt;p&gt;Let’s take a look at this innocent-looking C++ code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;chrono&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&amp;#39;000&amp;#39;000&amp;#39;000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nanoseconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;duration_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;nanoseconds&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Result: &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Time: &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nanoseconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; nanoseconds&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code should, at a glance, take a few hundred milliseconds, maybe even a second, to run a &lt;strong&gt;billion&lt;/strong&gt; additions.&lt;/p&gt;
&lt;p&gt;And yet, when compiled in &lt;strong&gt;Release mode&lt;/strong&gt;, you might see output like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000000000&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nanoseconds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wait - what?&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;What Happened: The Compiler Outsmarted You&lt;/h2&gt;
&lt;p&gt;The compiler looked at this loop and thought:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“You're just adding 1 a billion times? I know how this ends.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And instead of generating machine code for a billion iterations, it optimized the loop into this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&amp;#39;000&amp;#39;000&amp;#39;000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;No loop. No wasted CPU cycles. Just the final result, instantly.&lt;/p&gt;
&lt;p&gt;The output is correct i.e. &lt;code&gt;sink&lt;/code&gt; is &lt;code&gt;1,000,000,000&lt;/code&gt; - but the loop never actually ran.&lt;/p&gt;
&lt;p&gt;This is an example of &lt;strong&gt;dead code elimination&lt;/strong&gt; and &lt;strong&gt;loop strength reduction&lt;/strong&gt;, two standard optimizations in modern compilers like MSVC, Clang, and GCC.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Introducing &lt;code&gt;volatile&lt;/code&gt;: Your Code’s Bodyguard&lt;/h2&gt;
&lt;p&gt;To stop the compiler from doing this, we can use the &lt;code&gt;volatile&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This keyword tells the compiler:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Do not optimize reads or writes to this variable. Every access is important, even if it seems pointless to you.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With &lt;code&gt;volatile&lt;/code&gt;, the compiler is forced to generate real instructions for every addition, and now the loop takes &lt;strong&gt;real time&lt;/strong&gt; to run. You might see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000000000&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;450000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nanoseconds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s more like it.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;What Exactly Does &lt;code&gt;volatile&lt;/code&gt; Do?&lt;/h2&gt;
&lt;p&gt;In C++, &lt;code&gt;volatile&lt;/code&gt; is a type qualifier that instructs the compiler:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Do not cache this variable in a register.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do not remove or merge reads/writes.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assume this variable might be changed by something outside your current code.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s commonly used in embedded systems and multithreaded contexts where variables might change due to hardware or background processes.&lt;/p&gt;
&lt;p&gt;In our case, it's used as a &lt;strong&gt;benchmarking hack&lt;/strong&gt; - we don’t want the compiler to optimize our code away while we’re trying to measure it.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;When Not to Use &lt;code&gt;volatile&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;It’s tempting to use &lt;code&gt;volatile&lt;/code&gt; everywhere once you discover it, but resist that urge.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It &lt;strong&gt;does not make your code thread-safe&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It can &lt;strong&gt;reduce performance&lt;/strong&gt; by disabling useful optimizations.&lt;/li&gt;
&lt;li&gt;It should be reserved for &lt;strong&gt;rare, specific scenarios&lt;/strong&gt; like memory-mapped hardware or precise timing measurements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use it sparingly, and only when you truly need to prevent the compiler from reordering or eliminating reads/writes.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Key Takeaways&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Modern C++ compilers are extremely aggressive&lt;/strong&gt; about optimizing your code - even to the point of deleting entire loops.&lt;/li&gt;
&lt;li&gt;The keyword &lt;code&gt;volatile&lt;/code&gt; tells the compiler: &lt;em&gt;“Hands off. Don’t optimize this.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;If you're benchmarking or dealing with low-level systems, knowing when and how to use &lt;code&gt;volatile&lt;/code&gt; is essential.&lt;/li&gt;
&lt;li&gt;Don't assume your code is running just because you wrote it - &lt;strong&gt;always measure, and always verify&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;“The best performance improvement is the one your compiler gives you for free - unless it gives you &lt;em&gt;zero&lt;/em&gt;.”&lt;br&gt;
— &lt;em&gt;A C++ developer, watching their loop vanish into thin air&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you’re new to low-level benchmarking, you might also like &lt;a href="from-python-to-nanoseconds-understanding-c-build-modes-through-a-simple-timing-benchmark.html"&gt;this article on build modes&lt;/a&gt;.&lt;/p&gt;</content><category term="Programming"/><category term="C++"/><category term="VOLATILE"/><category term="Low Latency Programming"/></entry><entry><title>Why Integer Math Is So Much Faster Than Floating-Point</title><link href="https://azad2171.github.io/why-integer-math-is-faster-than-floating-point/" rel="alternate"/><published>2025-07-18T22:00:00+05:30</published><updated>2025-07-18T22:00:00+05:30</updated><author><name>Lovekesh Azad</name></author><id>tag:azad2171.github.io,2025-07-18:/why-integer-math-is-faster-than-floating-point/</id><summary type="html">&lt;p&gt;Discover why integer operations outperform floating-point math in C++ and how it impacts performance-critical systems like HFT and low-latency computing.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the world of high-performance computing, and especially in high, frequency trading (HFT) - nanoseconds matter. As a developer learning C++, understanding why some operations are faster than others isn’t just an academic curiosity. It’s the beginning of writing better, faster, and more predictable code.&lt;/p&gt;
&lt;p&gt;In this chapter, we’ll answer a seemingly simple question:&lt;/p&gt;
&lt;h2&gt;Why is integer math faster than floating-point math?&lt;/h2&gt;
&lt;p&gt;The answer lies deeper than just “the compiler does a better job.” To really understand it, we have to go all the way down to the CPU’s architecture.&lt;/p&gt;
&lt;h2&gt;The Experiment&lt;/h2&gt;
&lt;p&gt;Let’s consider two versions of the same loop. Both run one billion times. One adds 1.0 to a floating-point variable (&lt;code&gt;double&lt;/code&gt;), and the other adds 1 to an integer (&lt;code&gt;int64_t&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Floating-point loop&lt;/span&gt;
&lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&amp;#39;000&amp;#39;000&amp;#39;000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Integer loop&lt;/span&gt;
&lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&amp;#39;000&amp;#39;000&amp;#39;000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When compiled in Release mode and timed, I got:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Floating-point&lt;/strong&gt;: ~2.8 seconds (2,800,000,000 ns)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integer&lt;/strong&gt;: ~0.45 seconds (450,000,000 ns)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s a 6x performance difference.&lt;/p&gt;
&lt;h3&gt;What’s going on?&lt;/h3&gt;
&lt;h2&gt;The CPU is an Assembly Line&lt;/h2&gt;
&lt;p&gt;Modern CPUs are built around a concept called &lt;em&gt;pipelining&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Imagine a factory assembly line: instead of waiting for one item to be built from start to finish, you build many items in stages, passing each piece down the line. Every stage works in parallel, increasing throughput.&lt;/p&gt;
&lt;p&gt;Instructions in a CPU work the same way. When you write something like &lt;code&gt;sink += 1&lt;/code&gt;, the CPU breaks it down into micro-operations and sends them through its instruction pipeline.&lt;/p&gt;
&lt;p&gt;But - and this is key - some instructions are simpler and faster to move through that pipeline than others.&lt;/p&gt;
&lt;h2&gt;Integer Math Is the Fast Path&lt;/h2&gt;
&lt;p&gt;Integer addition is about as simple as it gets in CPU terms. It involves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One ALU (Arithmetic Logic Unit) instruction&lt;/li&gt;
&lt;li&gt;One register read&lt;/li&gt;
&lt;li&gt;One register write&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Modern CPUs have multiple ALUs, and each can do integer math in a single clock cycle. The CPU can queue them up, execute them in parallel, and keep its pipelines full.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 &lt;strong&gt;Result&lt;/strong&gt;: Integer math is fast, parallelizable, and compiler-friendly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Floating-Point Is the Slow Path&lt;/h2&gt;
&lt;p&gt;Floating-point math, even simple additions, is much more complex:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The numbers are represented in IEEE 754 format (sign, exponent, mantissa)&lt;/li&gt;
&lt;li&gt;The CPU must align the exponents, add the mantissas, then normalize and round the result&lt;/li&gt;
&lt;li&gt;It also must handle edge cases: NaN, ±infinity, denormals, overflows, underflows&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This work is done in a dedicated unit called the &lt;strong&gt;FPU&lt;/strong&gt; (Floating Point Unit). Most CPUs have fewer FPUs than integer units. These units are slower and more specialized - they don’t benefit from the same level of pipelining and parallelism as integer units.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 &lt;strong&gt;Result&lt;/strong&gt;: Floating-point math is powerful, but it’s slower and harder to optimize.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Why This Matters (Especially in HFT)&lt;/h2&gt;
&lt;p&gt;In Python, you don’t think about this. Whether you write &lt;code&gt;x += 1&lt;/code&gt; or &lt;code&gt;x += 1.0&lt;/code&gt;, the interpreter figures it out. Performance differences are hidden under multiple abstraction layers.&lt;/p&gt;
&lt;p&gt;But in C++, you’re much closer to the metal.&lt;/p&gt;
&lt;p&gt;If you’re writing tight loops that run on every market tick, or latency-sensitive order book code, knowing that floating-point math can cost you 5-10x more CPU time is not optional - it’s essential.&lt;/p&gt;
&lt;h2&gt;Why Compilers Favor Integers&lt;/h2&gt;
&lt;p&gt;The CPU is part of the story - but the compiler plays a major role too.&lt;/p&gt;
&lt;p&gt;Compilers optimize integer code more aggressively because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integer math has predictable, exact behavior  &lt;/li&gt;
&lt;li&gt;It's free from rounding or precision concerns  &lt;/li&gt;
&lt;li&gt;Loop analysis is easier, enabling loop unrolling, vectorization, and instruction reordering  &lt;/li&gt;
&lt;li&gt;There’s less risk of introducing undefined or edge-case behavior  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Floating-point math introduces complexity that often prevents the compiler from applying aggressive optimizations.&lt;/p&gt;
&lt;h3&gt;So here’s the rule:&lt;/h3&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;If you can use integers, use them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Reserve floating-point only when you need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decimal precision (e.g., P&amp;amp;L calcs, percentages)&lt;/li&gt;
&lt;li&gt;Complex math (e.g., square roots, trigonometry)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For loop counters, indices, IDs, timestamps, or state - stick to integers.&lt;/p&gt;
&lt;h2&gt;What You Just Learned&lt;/h2&gt;
&lt;p&gt;By running two simple loops, you’ve learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The CPU treats integer and floating-point instructions very differently  &lt;/li&gt;
&lt;li&gt;Integer math is simpler, faster, and more parallel  &lt;/li&gt;
&lt;li&gt;Floating-point math is complex, slow, and harder to optimize  &lt;/li&gt;
&lt;li&gt;Compiler optimizations depend heavily on instruction type  &lt;/li&gt;
&lt;li&gt;Even one line of code (&lt;code&gt;sink += 1.0&lt;/code&gt; vs &lt;code&gt;sink += 1&lt;/code&gt;) can make a 6x difference  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And most importantly:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Performance in C++ is not magic. It’s mechanics.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The more you understand the hardware, the more power you have as a developer.&lt;/p&gt;
&lt;h2&gt;The Takeaway&lt;/h2&gt;
&lt;p&gt;If you're coming from Python or high-level programming, it's easy to overlook what your code turns into once compiled. But in C++, especially in latency-sensitive applications like HFT, you can't afford to ignore how your instructions translate into silicon.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So here’s the golden rule:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If you can use integers, use them.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use floating-point types only when you truly need them - and know that they come at a cost.&lt;/p&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Understanding performance in C++ isn’t just about writing faster code - it’s about thinking in layers:&lt;br&gt;
&lt;strong&gt;language → compiler → CPU&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;By learning how a simple loop behaves differently with integers vs. floating points, you're not just optimizing - you're building intuition about how machines actually work.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“To understand the code, read the code.&lt;br&gt;
To understand the performance, read the assembly.”&lt;br&gt;
— Unknown systems engineer, probably sleep-deprived&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Until next time, may your loops be tight and your pipelines full.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you’re new to low-level benchmarking, you might also like &lt;a href="from-python-to-nanoseconds-understanding-c-build-modes-through-a-simple-timing-benchmark.html"&gt;this article on build modes&lt;/a&gt;.&lt;/p&gt;</content><category term="Programming"/><category term="C++"/><category term="HFT"/><category term="low latency"/><category term="performance optimization"/><category term="floating point"/></entry><entry><title>From Python to Nanoseconds: C++ Build Modes Explained</title><link href="https://azad2171.github.io/from-python-to-nanoseconds/" rel="alternate"/><published>2025-07-17T02:00:00+05:30</published><updated>2025-07-17T02:00:00+05:30</updated><author><name>Lovekesh Azad</name></author><id>tag:azad2171.github.io,2025-07-17:/from-python-to-nanoseconds/</id><summary type="html">&lt;p&gt;A practical guide comparing Python and C++ timing, and how C++ build modes impact performance.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Understanding C++ Build Modes Through a Simple Timing Benchmark&lt;/h1&gt;
&lt;p&gt;If you’re a developer transitioning to C++, one of the first things you'll notice is how much emphasis the language places on the build process -and how much performance can hinge on compiler settings.&lt;/p&gt;
&lt;p&gt;This post is a crash course in one of C++’s most powerful (and misunderstood) features: the difference between &lt;strong&gt;Debug&lt;/strong&gt; and &lt;strong&gt;Release&lt;/strong&gt; builds -and how your choice can mean the difference between seconds and nanoseconds.&lt;/p&gt;
&lt;p&gt;We’ll walk through:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The C++ build process (compiler and linker basics)  &lt;/li&gt;
&lt;li&gt;The difference between Debug and Release modes&lt;/li&gt;
&lt;li&gt;A simple, practical program to measure nanosecond-level performance  &lt;/li&gt;
&lt;li&gt;Why this matters in high-performance domains like finance, gaming, or systems programming  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;What You Need (Tools &amp;amp; Setup)&lt;/h2&gt;
&lt;p&gt;If you're on Windows, the easiest way to get started is with &lt;strong&gt;Visual Studio 2022 Community Edition&lt;/strong&gt;. It gives you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The MSVC compiler  &lt;/li&gt;
&lt;li&gt;A built-in linker  &lt;/li&gt;
&lt;li&gt;A powerful debugger  &lt;/li&gt;
&lt;li&gt;An IDE that handles your project structure for you  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;During installation, be sure to select the &lt;strong&gt;"Desktop development with C++"&lt;/strong&gt; workload.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;Understanding the Build Process&lt;/h2&gt;
&lt;p&gt;Unlike Python, where you run &lt;code&gt;.py&lt;/code&gt; scripts directly, C++ is a compiled language. That means there’s an extra step between writing your code and running your program.&lt;/p&gt;
&lt;h3&gt;Step-by-Step:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;You write a &lt;code&gt;.cpp&lt;/code&gt; source file.  &lt;/li&gt;
&lt;li&gt;The compiler translates it into an object file (&lt;code&gt;.obj&lt;/code&gt;) -valid machine code, but incomplete.  &lt;/li&gt;
&lt;li&gt;The linker takes one or more object files and connects all the parts together into a final &lt;code&gt;.exe&lt;/code&gt; file.  &lt;/li&gt;
&lt;li&gt;If your code calls external functions (from libraries or other files), the linker’s job is to “resolve” those references.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This multi-stage build process might seem like overhead, but it enables serious performance tuning, modularity, and reusability. You can link against compiled libraries (even without their source), and you have full control over optimization levels.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Debug vs. Release: What’s the Difference?&lt;/h2&gt;
&lt;p&gt;Here’s the big one: when you build your project, you're usually choosing between &lt;strong&gt;Debug&lt;/strong&gt; and &lt;strong&gt;Release&lt;/strong&gt; configurations.&lt;/p&gt;
&lt;h3&gt;Debug Build&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Compiles with &lt;strong&gt;no optimizations&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Includes extra debug symbols to help step through your code  &lt;/li&gt;
&lt;li&gt;Makes your code easier to inspect, but slower  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Release Build&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Compiles with &lt;strong&gt;aggressive optimizations&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Removes unused code, inlines functions, and reorders instructions for speed  &lt;/li&gt;
&lt;li&gt;No debug info (unless explicitly configured)  &lt;/li&gt;
&lt;li&gt;Often drastically faster than Debug  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;A Simple Benchmark: Measure a Billion Iterations&lt;/h2&gt;
&lt;p&gt;Let’s see the impact of compiler optimizations in action. This C++ program performs a simple floating-point addition in a loop &lt;strong&gt;one billion times&lt;/strong&gt;, and measures the time in &lt;strong&gt;nanoseconds&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;chrono&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nanoseconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;duration_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;nanoseconds&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Loop took &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nanoseconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; nanoseconds.&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Final result (to prevent optimization): &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h2&gt;How to Run It in Visual Studio&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Open Visual Studio  &lt;/li&gt;
&lt;li&gt;Go to &lt;strong&gt;File → New → Project → Console App&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Name your project (e.g., &lt;code&gt;LatencyTest1&lt;/code&gt;) and click &lt;strong&gt;Create&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Replace the default code with the snippet above  &lt;/li&gt;
&lt;li&gt;At the top, ensure the build configuration is set to &lt;strong&gt;"Debug"&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;F5&lt;/code&gt; (or click the green "Run" button)  &lt;/li&gt;
&lt;li&gt;Take note of the time reported  &lt;/li&gt;
&lt;li&gt;Now switch the configuration to &lt;strong&gt;"Release"&lt;/strong&gt; and press &lt;code&gt;Ctrl+F5&lt;/code&gt; (to run without the debugger). Note the new time  &lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;What Just Happened?&lt;/h2&gt;
&lt;p&gt;You likely saw a dramatic difference in execution time -possibly &lt;strong&gt;orders of magnitude&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;That’s the power of compiler optimizations:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Debug&lt;/th&gt;
&lt;th&gt;Release&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Optimization&lt;/td&gt;
&lt;td&gt;Off&lt;/td&gt;
&lt;td&gt;On (aggressive)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Symbol info&lt;/td&gt;
&lt;td&gt;On&lt;/td&gt;
&lt;td&gt;Off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Performance&lt;/td&gt;
&lt;td&gt;Lower&lt;/td&gt;
&lt;td&gt;Much higher&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Use case&lt;/td&gt;
&lt;td&gt;Development &amp;amp; debugging&lt;/td&gt;
&lt;td&gt;Production &amp;amp; benchmarking&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In Release mode, the compiler might:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inline the loop  &lt;/li&gt;
&lt;li&gt;Vectorize operations (SIMD)  &lt;/li&gt;
&lt;li&gt;Unroll the loop  &lt;/li&gt;
&lt;li&gt;Use processor-specific instructions  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Without &lt;code&gt;volatile&lt;/code&gt;, it might even remove the loop entirely -assuming it has no side effects.&lt;br&gt;
That's why we use &lt;code&gt;volatile&lt;/code&gt; -to signal that the variable might change in ways the compiler can’t predict.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;Why This Matters (Especially in Finance or HFT)&lt;/h2&gt;
&lt;p&gt;In latency-sensitive applications like &lt;strong&gt;high-frequency trading&lt;/strong&gt;, &lt;strong&gt;video games&lt;/strong&gt;, or &lt;strong&gt;systems programming&lt;/strong&gt;, you can’t afford to overlook what the compiler is doing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nanoseconds add up&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Optimizations change program behavior and timing  &lt;/li&gt;
&lt;li&gt;The build configuration becomes part of your &lt;strong&gt;performance model&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a developer transitioning from high-level languages, understanding these low-level tools gives you a huge edge -and helps you write code that doesn’t just work, but &lt;strong&gt;works fast&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Key Takeaways&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++ code is not just "written" -it’s compiled and optimized  &lt;/li&gt;
&lt;li&gt;Debug builds are great for development, terrible for benchmarks  &lt;/li&gt;
&lt;li&gt;Release builds let the compiler unleash its full power  &lt;/li&gt;
&lt;li&gt;Even a simple loop can reveal deep truths about how C++ behaves under the hood  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If this post helped clarify some of the mystery around C++'s build modes or inspired you to benchmark your own code, let me know -or feel free to share your own Debug vs. Release results.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Want to see more posts like this?&lt;br&gt;
I’ll be exploring C++ from the perspective of a Python dev with a quant background - diving deep into performance, low-latency systems, and real-world HFT applications.  &lt;/p&gt;
&lt;p&gt;But even if you're not into finance, understanding how the compiler works is a &lt;strong&gt;C++ superpower&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Happy coding - and may your nanoseconds be few.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For another deep dive into performance, check out &lt;a href="why-integer-math-is-so-much-faster-than-floating-point.html"&gt;why integer math is faster than floating point&lt;/a&gt;.&lt;/p&gt;</content><category term="misc"/><category term="c++"/><category term="optimization"/><category term="performance"/></entry></feed>